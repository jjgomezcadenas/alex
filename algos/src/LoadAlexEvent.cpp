/////////////////////////////////////////////////////////////////// Algorithm reading the Irene Events and filling Alex Classes:// AHits, AParticles and ATTracks.// Persistency is made by ASvc./////////////////////////////////////////////////////////////////#include "LoadAlexEvent.hh"#include <alex/ISvc.h>#include <alex/ASvc.h>#include <alex/AEvent.h>//#include <alex/ATTrack.h>#include <alex/AParticle.h>//#include <alex/AHit.h>namespace alex {//--------------------------------------------------------------------  bool LoadAlexEvent::Init()//--------------------------------------------------------------------  {    log4cpp::Category& klog = GetLogger(fName);    klog << log4cpp::Priority::INFO << "LoadAlexEvent::Init()" ;    klog << log4cpp::Priority::DEBUG << "Init ASvc" ;    ASvc::Instance().Init(fDebug,0);    klog << log4cpp::Priority::DEBUG << "Init ISvc" ;    ISvc::Instance().Init(fDebug);    klog << log4cpp::Priority::DEBUG << " Set start event to"     << ISvc::Instance().GetStartEvent();    ASvc::Instance().SetStartEvent(      ISvc::Instance().GetStartEvent()) ;    return true;  }  //--------------------------------------------------------------------  bool LoadAlexEvent::Execute()//--------------------------------------------------------------------  {    log4cpp::Category& klog = GetLogger(fName);    klog << log4cpp::Priority::DEBUG << "Clear Alex event";    // Clear Alex Service    ASvc::Instance().GetAEvent().ClearEvent();    klog << log4cpp::Priority::DEBUG << " Set event number to "     << ISvc::Instance().GetEvtNum();    ASvc::Instance().GetAEvent().SetEvtNum(      ISvc::Instance().GetEvtNum()) ;    // Getting Alex Particles    klog << log4cpp::Priority::DEBUG << "+++Getting Alex particles";    std::vector<alex::AParticle*> aParticles=AlexParticles(                                            ISvc::Instance().GetParticles(),                                             fName,fDebug);        klog << log4cpp::Priority::DEBUG << "-->number of aParticles ="     << aParticles.size();      int t=0;    double ene = 0;    for (auto aPart : aParticles)     {      t++;      klog << log4cpp::Priority::DEBUG << "Adding particle " << t ;      ASvc::Instance().GetAEvent().AddParticle(aPart);      fEnergyOfParticles_h1->Fill(aPart->GetEkin());      fTrackLength_h1->Fill(aPart->GetParam("TrackLength"));      ene+=aPart->GetP4().Energy();    }    fNumberOfParticles_h1->Fill(t);         klog << log4cpp::Priority::DEBUG << "-------Print Event------" ;    klog << log4cpp::Priority::DEBUG <<ASvc::Instance().GetAEvent().PrintInfo();    ASvc::Instance().GetAEvent().SetTrueEventEnergy(ene);    ASvc::Instance().GetAEvent().SetRecEventEnergy(ene);        return true;  }  //--------------------------------------------------------------------  bool LoadAlexEvent::End()//--------------------------------------------------------------------  {    log4cpp::Category& klog = GetLogger(fName);    klog << log4cpp::Priority::INFO << "LoadAlexEvent::End()";    return true;  }  //--------------------------------------------------------------------  std::vector<alex::AParticle*>   PLoadAlexEvent::AlexParticles(std::vector<const irene::Particle*> iParticles,                                std::string logger, std::string debug)//--------------------------------------------------------------------  {    log4cpp::Category& klog = GetLogger(logger);    klog << log4cpp::Priority::INFO << "PLoadAlexEvent::AlexParticles()";    std::vector<alex::AParticle*> aParticles;    for (auto iPart: iParticles )     {      AParticle* aPart = new AParticle();      aPart->SetLevelDebug(debug);      aPart->SetID(iPart->GetParticleID());      aPart->SetParticleName(iPart->Name());      aPart->SetCharge(iPart->GetCharge());      aPart->SetVertex(iPart->GetInitialVertex().Vect());      aPart->SetP4(iPart->GetInitialMomentum());      aPart->SetIsPrimary(iPart->IsPrimary());      aPart->SetMotherID(0);      if (!aPart->GetIsPrimary())        aPart->SetMotherID(iPart->GetMother()->GetParticleID());      aPart->SetProperty("CreatorProcess", iPart->GetCreatorProcess());      aPart->SetParam("TrackLength", iPart->GetTrackLength());      aParticles.push_back(aPart);             }    return aParticles;  }}